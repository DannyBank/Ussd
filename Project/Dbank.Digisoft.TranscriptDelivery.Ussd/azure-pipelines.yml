name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)
trigger:
  - master
  - dev
  - release/*

pool: 'Default'

variables:
  buildConfiguration: 'Release'
  buildConfigurationCI: 'Ci'

steps:
  - checkout: self
    clean: true
    persistCredentials: true
  - task: UseGitVersion@5
    displayName: 'GitVersion Update'
    inputs:
      versionSpec: '5.x'
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      useGlobalJson: true
      includePreviewVersions: true
      performMultiLevelLookup: true
  - task: DotNetCoreCLI@2
    displayName: 'Build Release'
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '-c $(buildConfiguration) --no-cache /p:Version=$(GitVersion.NuGetVersion)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  - task: DotNetCoreCLI@2
    displayName: 'Build CI'
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '-c $(buildConfigurationCI) --no-cache /p:Version=$(GitVersion.NuGetVersion)'
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  - task: DotNetCoreCLI@2
    displayName: 'Create Nuget Release'
    inputs:
      command: 'pack'
      packagesToPack: '**/*.csproj'
      nobuild: true
      configuration: $(buildConfiguration)
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'GitVersion.SemVer'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  - task: DotNetCoreCLI@2
    displayName: 'Create Nuget CI'
    inputs:
      command: 'pack'
      packagesToPack: '**/*.csproj'
      nobuild: true
      configuration: $(buildConfigurationCI)
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'GitVersion.SemVer'
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
  - task: GitTag@5
    inputs:
      workingdir: '$(SYSTEM.DEFAULTWORKINGDIRECTORY)'
      tagUser: 'Kojo Anselm'
      tagEmail: 'ntierenyin@gmail.com'
      tag: 'v$(GitVersion.SemVer)'
      forceTagCreation: true
    condition: and( and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/'))), not(contains(variables['Build.SourceBranch'], 'pull')) )
    env:
      SYSTEM_ACCESSTOKEN: $(system.accesstoken)